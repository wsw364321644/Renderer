@startuml Renderer
!include RenderCore.pu
!include Engine.pu

class FMaterialShader {
    +template<typename ShaderRHIParamRef> FORCEINLINE_DEBUGGABLE void SetViewParameters(FRHICommandList& RHICmdList, const ShaderRHIParamRef ShaderRHI, const FSceneView& View, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer)
    +template< typename TRHIShader > void SetParameters(FRHICommandList& RHICmdList,TRHIShader* ShaderRHI,const FMaterialRenderProxy* MaterialRenderProxy, const FMaterial& Material,const FSceneView& View);
}
note top
Base class of all shaders that need material parameters.
end note 
FShader<|--FMaterialShader



class FMeshMaterialShader{
    +void GetShaderBindings(const FScene* Scene,ERHIFeatureLevel::Type FeatureLevel,const FPrimitiveSceneProxy* PrimitiveSceneProxy,const FMaterialRenderProxy& MaterialRenderProxy,const FMaterial& Material,const FMeshPassProcessorRenderState& DrawRenderState,const FMeshMaterialShaderElementData& ShaderElementData,FMeshDrawSingleShaderBindings& ShaderBindings) const
    +void GetElementShaderBindings(const FShaderMapPointerTable& PointerTable,const FScene* Scene, const FSceneView* ViewIfDynamicMeshCommand, const FVertexFactory* VertexFactory,const EVertexInputStreamType InputStreamType,const FStaticFeatureLevel FeatureLevel,const FPrimitiveSceneProxy* PrimitiveSceneProxy,const FMeshBatch& MeshBatch,const FMeshBatchElement& BatchElement, const FMeshMaterialShaderElementData& ShaderElementData,FMeshDrawSingleShaderBindings& ShaderBindings,FVertexInputStreamArray& VertexStreams) const
    +template<typename ShaderType, typename PointerTableType, typename ShaderElementDataType> static inline void GetElementShaderBindings(const TShaderRefBase<ShaderType, PointerTableType>& Shader,const FScene* Scene,const FSceneView* ViewIfDynamicMeshCommand,const FVertexFactory* VertexFactory,const EVertexInputStreamType InputStreamType,ERHIFeatureLevel::Type FeatureLevel,const FPrimitiveSceneProxy* PrimitiveSceneProxy,const FMeshBatch& MeshBatch,const FMeshBatchElement& BatchElement,const ShaderElementDataType& ShaderElementData,FMeshDrawSingleShaderBindings& ShaderBindings,FVertexInputStreamArray& VertexStreams)
}
note top
Base class of all shaders that need material and vertex factory parameters.
end note 
FMaterialShader<|--FMeshMaterialShader


class FDepthOnlyPS
note top
 A pixel shader for rendering the depth of a mesh
end note 
FMeshMaterialShader<|--FDepthOnlyPS

class TDepthOnlyVS
FMeshMaterialShader<|--TDepthOnlyVS


class FMeshPassProcessor
note top
 Base class of mesh processors, whose job is to transform FMeshBatch draw descriptions received from scene proxy implementations into FMeshDrawCommands ready for the RHI command list
end note 

class FDepthPassMeshProcessor{

}
FMeshPassProcessor<|--FDepthPassMeshProcessor
note top
DepthRendering.cpp
end note 



class FBasePassMeshProcessor
FMeshPassProcessor<|--FBasePassMeshProcessor
note top
BassPassRendering.cpp
end note 



class FPrimitiveSceneInfo{
    FPrimitiveSceneProxy* Proxy
}
FPrimitiveSceneInfo -- FPrimitiveSceneProxy

class Fscene{
    +UWorld* World
    +TArray<FPrimitiveSceneInfo*> Primitives
	+TArray<FMatrix> PrimitiveTransforms
	+TArray<FPrimitiveSceneProxy*> PrimitiveSceneProxies
	+TArray<FPrimitiveBounds> PrimitiveBounds
	+TArray<FPrimitiveFlagsCompact> PrimitiveFlagsCompact
	+TArray<FPrimitiveVisibilityId> PrimitiveVisibilityIds
	+TArray<uint8> PrimitiveOcclusionFlags
	+TArray<FBoxSphereBounds> PrimitiveOcclusionBounds
	+TArray<FPrimitiveComponentId> PrimitiveComponentIds
	+TArray<FPrimitiveVirtualTextureFlags> PrimitiveVirtualTextureFlags
	+TArray<FPrimitiveVirtualTextureLodInfo> PrimitiveVirtualTextureLod
}
FSceneInterface <|-- Fscene
Fscene --> UWorld
Fscene --> FPrimitiveSceneInfo
Fscene --> FPrimitiveSceneProxy



class FParallelMeshDrawCommandPass{
	+ 	void DispatchPassSetup(
		FScene* Scene,
		const FViewInfo& View, 
		EMeshPass::Type PassType, 
		FExclusiveDepthStencil::Type BasePassDepthStencilAccess,
		FMeshPassProcessor* MeshPassProcessor,
		const TArray<FMeshBatchAndRelevance, SceneRenderingAllocator>& DynamicMeshElements,
		const TArray<FMeshPassMask, SceneRenderingAllocator>* DynamicMeshElementsPassRelevance,
		int32 NumDynamicMeshElements,
		TArray<const FStaticMeshBatch*, SceneRenderingAllocator>& InOutDynamicMeshCommandBuildRequests,
		int32 NumDynamicMeshCommandBuildRequestElements,
		FMeshCommandOneFrameArray& InOutMeshDrawCommands,
		FMeshPassProcessor* MobileBasePassCSMMeshPassProcessor = nullptr, // Required only for the mobile base pass.
		FMeshCommandOneFrameArray* InOutMobileBasePassCSMMeshDrawCommands = nullptr // Required only for the mobile base pass.
	);
}


class FViewInfo{
	+ TStaticArray<FParallelMeshDrawCommandPass, EMeshPass::Num> ParallelMeshDrawCommandPasses;
}
FViewInfo --|> FSceneView
FViewInfo --> FParallelMeshDrawCommandPass


class FSceneRenderer{
	+ FScene* Scene; /** The scene being rendered. */
	+ FSceneViewFamily ViewFamily; /** The view family being rendered.  This references the Views array. */
	+ TArray<FViewInfo> Views; /** The views being rendered. */
	+ FMeshElementCollector MeshCollector;
	+ FMeshElementCollector RayTracingCollector;
}
FSceneRenderer --> Fscene
FSceneRenderer --> FSceneViewFamily
FSceneRenderer --> FMeshElementCollector
FSceneRenderer --> FViewInfo
FSceneRenderer ..> FMeshPassProcessor
@enduml